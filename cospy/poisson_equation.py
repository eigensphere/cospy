'''

THIS IS A CODE GENERATED BY
Cospy/cospy/equation_factory.py
DON'T MODIFY IT

'''

import logging
import numpy as np 
from numpy import exp, sin, cos, tan 

import pygsl._numobj as Numeric
import cospy.utils as cp_utils

class Problem(object):
    '''
    classdocs
    '''


    def __init__(self,params):
        '''
        Constructor
        '''
        
        self.h = params.getfloat('gaussian amplitude',1)

        self.sigma2 = params.getfloat('gaussian sigma',1)**2
       
       
    def get_fields(self):
        return {'v': 'elliptic', 'rho': 'hyperbolic'}
    

    def set_initial_data(self,grid):


        for level in np.arange(grid._mg_levels-1):
            x, y, z = grid.get_coordinates(level)

            grid['rho',level] = self.id_rho(x, y, z)

   
        
    
    def id_rho(self,x,y,z): 

        r2 = x**2+y**2+z**2
        return self.h*(r2-3*self.sigma2)*np.exp(-0.5*r2/self.sigma2)/self.sigma2**2 

         
            
    def rhs(self,_t, _y, grid):


        grid.set_mol_fields(_y)
         
        rhs = dict()
                               
        rhs['rho'] = self.rhs_rho(grid['rho'])        
        
        f = grid.get_rhs(rhs)
    
        return f.ravel()


    def rhs_rho(self,rho):
        return -rho


    def rhs_jac(self,t, y, m):

        logging.error('rhs_jac not implemented')
        exit()


    def mg_problem(self):
        
        mgp = dict()

        mgs_v = dict() 
        
        mgs_v['source'] = self.v_source

        mgs_v['operator'] = self.v_operator

        mgs_v['diff_operator'] = self.v_diff_operator
        
        mgp['v'] = mgs_v
            
        return mgp
    
    


    def v_source(self,grid,level):

        v_s = grid['rho',level]

 
        x, y , z = grid.get_coordinates(level)

        s =  self.h*np.exp(-0.5*(x**2+y**2+z**2)/self.sigma2) 
        
        
        bbx = grid.parse_index('b',level,0)
        bby = grid.parse_index('b',level,1)
        bbz = grid.parse_index('b',level,2)
        
        for bx in bbx:
            v_s[bx,:,:] = s[bx,:,:]     
            for by in bby:
                v_s[bx,by,:] = s[bx,by,:] 
                for bz in bbz:
                    v_s[bx,by,bz] = s[bx,by,bz]                     
            for bz in bbz:
                v_s[bx,:,bz] = s[bx,:,bz] 

        for by in bby:
            v_s[:,by,:] = s[:,by,:] 
            for bz in bbz:
                v_s[:,by,bz] = s[:,by,bz] 

        for bz in bbz:
            v_s[:,:,bz] = s[:,:,bz]  
        
        return v_s


    def v_operator(self,grid,level):
        
        Lv = grid.lap('v',level)
        
        u= grid['v',level] 

        bbx = grid.parse_index('b',level,0)
        bby = grid.parse_index('b',level,1)
        bbz = grid.parse_index('b',level,2)

        for bx in bbx:
            Lv[bx,:,:] = u[bx,:,:]     
            for by in bby:
                Lv[bx,by,:] = u[bx,by,:] 
                for bz in bbz:
                    Lv[bx,by,bz] = u[bx,by,bz]                     
            for bz in bbz:
                Lv[bx,:,bz] = u[bx,:,bz] 

        for by in bby:
            Lv[:,by,:] = u[:,by,:] 
            for bz in bbz:
                Lv[:,by,bz] = u[:,by,bz] 

        for bz in bbz:
            Lv[:,:,bz] = u[:,:,bz]  
        

#        print(Lv)
#        exit()

        return Lv

    def v_diff_operator(self,grid,level):

        dLv = grid.dlap_du('v',level)


        bbx = grid.parse_index('b',level,0)
        bby = grid.parse_index('b',level,1)
        bbz = grid.parse_index('b',level,2)
        
        
        for bx in bbx:
            dLv[bx,:,:] = 1     
            for by in bby:
                dLv[bx,by,:] = 1 
                for bz in bbz:
                    dLv[bx,by,bz] = 1                     
            for bz in bbz:
                dLv[bx,:,bz] = 1 

        for by in bby:
            dLv[:,by,:] = 1 
            for bz in bbz:
                dLv[:,by,bz] = 1 

        for bz in bbz:
            dLv[:,:,bz] = 1  
        

        return dLv


